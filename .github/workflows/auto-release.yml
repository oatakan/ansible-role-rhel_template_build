---
name: Automated Release Pipeline

on:
  # Simple push trigger - but with smart filtering to prevent loops
  push:
    branches: [main, master]
    # Ignore pushes that only affect documentation/release files
    paths-ignore:
      - 'CHANGELOG.md'
      - 'docs/**'
      - '*.md'
      - '.github/workflows/post-release-updates.yml'
  schedule:
    - cron: '0 0 * * 0'  # Weekly on Sunday for accumulated changes
  workflow_dispatch:
    inputs:
      force_release:
        description: 'Force a release even without changes'
        type: boolean
        default: false

env:
  OPENAI_API_KEY: ${{ secrets.OPENAI_API_KEY }}
  ANTHROPIC_API_KEY: ${{ secrets.ANTHROPIC_API_KEY }}

jobs:
  # Check if we should skip this release cycle
  check-release-needed:
    runs-on: ubuntu-latest
    outputs:
      should_skip: ${{ steps.check.outputs.should_skip }}
      skip_reason: ${{ steps.check.outputs.skip_reason }}
    steps:
      - name: Checkout code
        uses: actions/checkout@v4
        with:
          fetch-depth: 2  # Get current and previous commit

      - name: Check if release should be skipped
        id: check
        run: |
          # Get the latest commit info
          COMMIT_AUTHOR=$(git log -1 --pretty=format:"%an")
          COMMIT_EMAIL=$(git log -1 --pretty=format:"%ae")
          COMMIT_MSG=$(git log -1 --pretty=format:"%s")
          
          echo "Commit author: $COMMIT_AUTHOR"
          echo "Commit email: $COMMIT_EMAIL"
          echo "Commit message: $COMMIT_MSG"
          
          # Skip if this was made by github-actions bot
          if [[ "$COMMIT_AUTHOR" == "github-actions[bot]" ]] || [[ "$COMMIT_EMAIL" == *"github-actions"* ]]; then
            echo "⚠️ Skipping release - commit made by GitHub Actions bot"
            echo "should_skip=true" >> $GITHUB_OUTPUT
            echo "skip_reason=bot_commit" >> $GITHUB_OUTPUT
            exit 0
          fi
          
          # Skip if commit message indicates a release or post-release update
          if [[ "$COMMIT_MSG" == *"chore: release"* ]] || [[ "$COMMIT_MSG" == *"post-release updates"* ]] || [[ "$COMMIT_MSG" == *"[skip release]"* ]]; then
            echo "⚠️ Skipping release - commit appears to be release-related"
            echo "should_skip=true" >> $GITHUB_OUTPUT
            echo "skip_reason=release_commit" >> $GITHUB_OUTPUT
            exit 0
          fi
          
          # Check if only documentation files changed
          CHANGED_FILES=$(git diff --name-only HEAD~1 HEAD)
          echo "Changed files: $CHANGED_FILES"
          
          # Count non-documentation changes
          NON_DOC_CHANGES=$(echo "$CHANGED_FILES" | grep -v -E '\.(md|txt)$|^docs/|^CHANGELOG|^\.github/workflows/post-release' | wc -l)
          
          if [[ $NON_DOC_CHANGES -eq 0 ]] && [[ -n "$CHANGED_FILES" ]]; then
            echo "⚠️ Skipping release - only documentation files changed"
            echo "should_skip=true" >> $GITHUB_OUTPUT
            echo "skip_reason=docs_only" >> $GITHUB_OUTPUT
            exit 0
          fi
          
          # Proceed with release
          echo "✅ Release should proceed - meaningful code changes detected"
          echo "should_skip=false" >> $GITHUB_OUTPUT
          echo "skip_reason=none" >> $GITHUB_OUTPUT

  analyze-changes:
    runs-on: ubuntu-latest
    needs: check-release-needed
    # Only run if we shouldn't skip
    if: needs.check-release-needed.outputs.should_skip == 'false'
    outputs:
      should_release: ${{ steps.analyze.outputs.should_release }}
      version_bump: ${{ steps.analyze.outputs.version_bump }}
      release_notes: ${{ steps.analyze.outputs.release_notes }}
      changelog_entry: ${{ steps.analyze.outputs.changelog_entry }}
    steps:
      - name: Checkout code
        uses: actions/checkout@v4
        with:
          fetch-depth: 0  # Full history for analysis

      - name: Set up Python
        uses: actions/setup-python@v5
        with:
          python-version: '3.11'

      - name: Install dependencies
        run: |
          python -m pip install --upgrade pip
          pip install -r .github/scripts/requirements.txt

      - name: Analyze changes with AI
        id: analyze
        run: |
          echo "🤖 Running AI release analysis..."
          
          # Run the AI analysis
          python .github/scripts/ai_release_analyzer.py
          
          # The script should set outputs, but let's also parse them here
          if [ -f /tmp/release_analysis.json ]; then
            # Parse outputs from the analysis file
            SHOULD_RELEASE=$(cat /tmp/release_analysis.json | jq -r '.should_release // "false"')
            VERSION_BUMP=$(cat /tmp/release_analysis.json | jq -r '.version_bump // "patch"')
            REASONING=$(cat /tmp/release_analysis.json | jq -r '.reasoning // "No reasoning provided"')
            
            echo "should_release=$SHOULD_RELEASE" >> $GITHUB_OUTPUT
            echo "version_bump=$VERSION_BUMP" >> $GITHUB_OUTPUT
            echo "analysis_reasoning=$REASONING" >> $GITHUB_OUTPUT
            
            echo "📊 Analysis Results:"
            echo "- Should Release: $SHOULD_RELEASE"
            echo "- Version Bump: $VERSION_BUMP" 
            echo "- Reasoning: $REASONING"
          else
            # Fallback: If AI analysis file doesn't exist, check the log output
            echo "⚠️ Analysis file not found, attempting to parse from output..."
            
            # For now, if we see version bump output, assume we should release
            # This is a temporary fix until we debug the AI script
            echo "should_release=true" >> $GITHUB_OUTPUT
            echo "version_bump=patch" >> $GITHUB_OUTPUT
            echo "analysis_reasoning=AI analysis completed but output parsing needs debugging" >> $GITHUB_OUTPUT
          fi
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
          FORCE_RELEASE: ${{ github.event.inputs.force_release }}

      - name: Post analysis summary
        if: steps.analyze.outputs.should_release == 'true'
        run: |
          echo "### 🤖 AI Release Analysis" >> $GITHUB_STEP_SUMMARY
          echo "" >> $GITHUB_STEP_SUMMARY
          echo "**Trigger:** ${{ github.event_name }}" >> $GITHUB_STEP_SUMMARY
          echo "**Strategy:** Branch protection (CI pre-validated on PRs)" >> $GITHUB_STEP_SUMMARY
          echo "**Loop Prevention:** Passed (no bot commits or docs-only changes)" >> $GITHUB_STEP_SUMMARY
          echo "**Recommended Version Bump:** ${{ steps.analyze.outputs.version_bump }}" >> $GITHUB_STEP_SUMMARY
          echo "" >> $GITHUB_STEP_SUMMARY
          echo "**Reasoning:**" >> $GITHUB_STEP_SUMMARY
          echo "${{ steps.analyze.outputs.analysis_reasoning }}" >> $GITHUB_STEP_SUMMARY

  create-release:
    needs: [check-release-needed, analyze-changes]
    if: needs.check-release-needed.outputs.should_skip == 'false' && (needs.analyze-changes.outputs.should_release == 'true' || github.event.inputs.force_release == 'true')
    runs-on: ubuntu-latest
    permissions:
      contents: write
      pull-requests: write
    steps:
      - name: Checkout code
        uses: actions/checkout@v4
        with:
          fetch-depth: 0
          token: ${{ secrets.GITHUB_TOKEN }}

      - name: Set up Python
        uses: actions/setup-python@v5
        with:
          python-version: '3.11'

      - name: Install dependencies
        run: |
          python -m pip install --upgrade pip
          pip install -r .github/scripts/requirements.txt

      - name: Configure Git
        run: |
          git config user.name "github-actions[bot]"
          git config user.email "github-actions[bot]@users.noreply.github.com"

      - name: Calculate new version
        id: version
        run: |
          LATEST_TAG=$(git describe --tags --abbrev=0 2>/dev/null || echo "v0.0.0")
          LATEST_VERSION=${LATEST_TAG#v}
          
          python -c "
          import semver
          version = semver.Version.parse('$LATEST_VERSION')
          bump_type = '${{ needs.analyze-changes.outputs.version_bump }}'
          
          if bump_type == 'major':
              new_version = version.bump_major()
          elif bump_type == 'minor':
              new_version = version.bump_minor()
          else:
              new_version = version.bump_patch()
          
          print(f'NEW_VERSION={new_version}')
          print(f'NEW_TAG=v{new_version}')
          " >> $GITHUB_OUTPUT

      - name: Update CHANGELOG.md (locally only)
        run: |
          python .github/scripts/update_changelog.py \
            --version "${{ steps.version.outputs.NEW_VERSION }}" \
            --entry "${{ needs.analyze-changes.outputs.changelog_entry }}"

      - name: Update documentation with AI (locally only)
        run: |
          python .github/scripts/ai_doc_updater.py \
            --version "${{ steps.version.outputs.NEW_VERSION }}"

      # Don't commit changes to master - just create the tag and release
      - name: Create and push tag (without committing to master)
        run: |
          git tag -a "${{ steps.version.outputs.NEW_TAG }}" \
            -m "Release ${{ steps.version.outputs.NEW_TAG }}

          ${{ needs.analyze-changes.outputs.changelog_entry }}"
          git push origin "${{ steps.version.outputs.NEW_TAG }}"

      - name: Create GitHub Release with enhanced notes
        uses: softprops/action-gh-release@v1
        with:
          tag_name: ${{ steps.version.outputs.NEW_TAG }}
          name: ${{ steps.version.outputs.NEW_TAG }}
          body: |
            ${{ needs.analyze-changes.outputs.release_notes }}
            
            ## 📋 Changelog Entry
            ${{ needs.analyze-changes.outputs.changelog_entry }}
            
            ## 🚀 Installation
            ```bash
            ansible-galaxy install oatakan.rhel_template_build:${{ steps.version.outputs.NEW_VERSION }}
            ```
          draft: false
          prerelease: false

  deploy-galaxy:
    needs: [check-release-needed, analyze-changes, create-release]
    if: needs.check-release-needed.outputs.should_skip == 'false'
    runs-on: ubuntu-latest
    steps:
      - name: Checkout code
        uses: actions/checkout@v4
        with:
          ref: ${{ needs.create-release.outputs.tag_name }}

      - name: Install ansible-core
        run: |
          pip install ansible-core

      - name: Import to Ansible Galaxy
        env:
          ANSIBLE_GALAXY_API_KEY: ${{ secrets.ANSIBLE_GALAXY_API_KEY }}
        run: |
          # Use the exact GitHub repository name for Galaxy import
          # Repository: oatakan/ansible-role-rhel_template_build
          ansible-galaxy role import \
            --api-key="${ANSIBLE_GALAXY_API_KEY}" \
            oatakan ansible-role-rhel_template_build

      - name: Verify Galaxy import
        run: |
          sleep 30  # Wait for Galaxy to process
          ansible-galaxy role info oatakan.rhel_template_build

  notify:
    needs: [check-release-needed, analyze-changes, create-release, deploy-galaxy]
    if: always()
    runs-on: ubuntu-latest
    steps:
      - name: Debug workflow results
        run: |
          echo "### 🔍 Workflow Debug Information" >> $GITHUB_STEP_SUMMARY
          echo "" >> $GITHUB_STEP_SUMMARY
          echo "| Job | Status | Result |" >> $GITHUB_STEP_SUMMARY
          echo "|-----|--------|--------|" >> $GITHUB_STEP_SUMMARY
          echo "| check-release-needed | ${{ needs.check-release-needed.result }} | should_skip: ${{ needs.check-release-needed.outputs.should_skip }} |" >> $GITHUB_STEP_SUMMARY
          echo "| analyze-changes | ${{ needs.analyze-changes.result }} | should_release: ${{ needs.analyze-changes.outputs.should_release }} |" >> $GITHUB_STEP_SUMMARY
          echo "| create-release | ${{ needs.create-release.result }} | - |" >> $GITHUB_STEP_SUMMARY
          echo "| deploy-galaxy | ${{ needs.deploy-galaxy.result }} | - |" >> $GITHUB_STEP_SUMMARY
          echo "" >> $GITHUB_STEP_SUMMARY

      - name: Send notification
        run: |
          if [[ "${{ needs.check-release-needed.outputs.should_skip }}" == "true" ]]; then
            echo "### ⏭️ Release Skipped" >> $GITHUB_STEP_SUMMARY
            echo "" >> $GITHUB_STEP_SUMMARY
            case "${{ needs.check-release-needed.outputs.skip_reason }}" in
              "bot_commit")
                echo "**Reason:** Commit made by GitHub Actions bot (prevents infinite loops)" >> $GITHUB_STEP_SUMMARY
                ;;
              "release_commit")
                echo "**Reason:** Commit appears to be release-related" >> $GITHUB_STEP_SUMMARY
                ;;
              "docs_only")
                echo "**Reason:** Only documentation files were changed" >> $GITHUB_STEP_SUMMARY
                ;;
              *)
                echo "**Reason:** ${{ needs.check-release-needed.outputs.skip_reason }}" >> $GITHUB_STEP_SUMMARY
                ;;
            esac
          elif [[ "${{ needs.analyze-changes.outputs.should_release }}" != "true" ]]; then
            echo "### 📊 Release Analysis: No Release Needed" >> $GITHUB_STEP_SUMMARY
            echo "" >> $GITHUB_STEP_SUMMARY
            echo "**AI Analysis Result:** ${{ needs.analyze-changes.outputs.analysis_reasoning }}" >> $GITHUB_STEP_SUMMARY
            echo "**Recommended Action:** No version bump required" >> $GITHUB_STEP_SUMMARY
          elif [[ "${{ needs.create-release.result }}" == "success" && "${{ needs.deploy-galaxy.result }}" == "success" ]]; then
            echo "### ✅ Release Successfully Deployed!" >> $GITHUB_STEP_SUMMARY
            echo "" >> $GITHUB_STEP_SUMMARY
            echo "🎉 **New version deployed to Ansible Galaxy**" >> $GITHUB_STEP_SUMMARY
            echo "📦 **Version:** ${{ needs.analyze-changes.outputs.version_bump }}" >> $GITHUB_STEP_SUMMARY
            echo "⏱️ **Completion Time:** $(( $(date +%s) - $(date -d '${{ github.event.head_commit.timestamp }}' +%s) )) seconds from push" >> $GITHUB_STEP_SUMMARY
          elif [[ "${{ needs.create-release.result }}" == "skipped" ]]; then
            echo "### ⚠️ Release Jobs Skipped" >> $GITHUB_STEP_SUMMARY
            echo "" >> $GITHUB_STEP_SUMMARY
            echo "**Analysis Says Release:** ${{ needs.analyze-changes.outputs.should_release }}" >> $GITHUB_STEP_SUMMARY
            echo "**Should Skip:** ${{ needs.check-release-needed.outputs.should_skip }}" >> $GITHUB_STEP_SUMMARY
            echo "**Likely Issue:** Conditional logic problem in workflow" >> $GITHUB_STEP_SUMMARY
            echo "" >> $GITHUB_STEP_SUMMARY
            echo "**Debug Info:**" >> $GITHUB_STEP_SUMMARY
            echo "- Check the workflow conditional statements" >> $GITHUB_STEP_SUMMARY
            echo "- Verify AI script outputs are being set correctly" >> $GITHUB_STEP_SUMMARY
          else
            echo "### ❌ Release Process Failed" >> $GITHUB_STEP_SUMMARY
            echo "" >> $GITHUB_STEP_SUMMARY
            echo "**Failed Job:** " >> $GITHUB_STEP_SUMMARY
            if [[ "${{ needs.create-release.result }}" == "failure" ]]; then
              echo "- create-release (check release creation logs)" >> $GITHUB_STEP_SUMMARY
            fi
            if [[ "${{ needs.deploy-galaxy.result }}" == "failure" ]]; then
              echo "- deploy-galaxy (check Galaxy deployment logs)" >> $GITHUB_STEP_SUMMARY
            fi
            echo "" >> $GITHUB_STEP_SUMMARY
            echo "**Check the individual job logs for detailed error information.**" >> $GITHUB_STEP_SUMMARY
          fi
