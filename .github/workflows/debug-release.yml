---
name: Debug Release Analysis

on:
  workflow_dispatch:
    inputs:
      target_branch:
        description: 'Branch to analyze'
        default: 'master'
        required: true

env:
  OPENAI_API_KEY: ${{ secrets.OPENAI_API_KEY }}
  ANTHROPIC_API_KEY: ${{ secrets.ANTHROPIC_API_KEY }}

jobs:
  debug-analysis:
    runs-on: ubuntu-latest
    steps:
      - name: Checkout code
        uses: actions/checkout@v4
        with:
          fetch-depth: 0

      - name: Set up Python
        uses: actions/setup-python@v5
        with:
          python-version: '3.11'

      - name: Install dependencies
        run: |
          python -m pip install --upgrade pip
          pip install -r .github/scripts/requirements.txt

      - name: Debug AI Analysis Script
        run: |
          echo "üîç Debugging AI analysis script..."
          echo "Current working directory: $(pwd)"
          echo "Python version: $(python --version)"
          echo "pip freeze:"
          pip freeze
          echo ""
          
          echo "üìÇ Checking for AI script..."
          if [ -f .github/scripts/ai_release_analyzer.py ]; then
            echo "‚úÖ AI script found"
            echo "File size: $(wc -l < .github/scripts/ai_release_analyzer.py) lines"
          else
            echo "‚ùå AI script not found!"
            echo "Available files in .github/scripts/:"
            ls -la .github/scripts/ || echo "Scripts directory not found"
          fi
          echo ""
          
          echo "üîç Checking git history..."
          echo "Latest tag: $(git describe --tags --abbrev=0 2>/dev/null || echo 'No tags found')"
          echo "Commits since last tag:"
          git log --oneline $(git describe --tags --abbrev=0 2>/dev/null || echo "HEAD~10")..HEAD || echo "No commit history available"
          echo ""
          
          echo "ü§ñ Running AI analysis (debug mode)..."
          python -c "
          import sys
          import os
          sys.path.append('.github/scripts')
          
          # Try to import the AI analyzer
          try:
              import ai_release_analyzer
              print('‚úÖ Successfully imported ai_release_analyzer module')
          except ImportError as e:
              print(f'‚ùå Failed to import ai_release_analyzer: {e}')
              print('Available files:')
              if os.path.exists('.github/scripts'):
                  for f in os.listdir('.github/scripts'):
                      print(f'  - {f}')
              sys.exit(1)
          
          # Try to run the analysis
          try:
              print('üîÑ Attempting to run analysis...')
              # This would run the actual analysis
              result = ai_release_analyzer.main() if hasattr(ai_release_analyzer, 'main') else None
              print(f'üìä Analysis result: {result}')
          except Exception as e:
              print(f'‚ùå Analysis failed: {e}')
              import traceback
              traceback.print_exc()
          "

      - name: Manual Analysis Test
        run: |
          echo "üß™ Running manual analysis test..."
          
          # Simulate what the AI analyzer should do
          LAST_TAG=$(git describe --tags --abbrev=0 2>/dev/null || echo "v1.0.0")
          COMMITS_SINCE=$(git rev-list ${LAST_TAG}..HEAD --count 2>/dev/null || echo "1")
          
          echo "Last tag: $LAST_TAG"
          echo "Commits since: $COMMITS_SINCE"
          
          if [ "$COMMITS_SINCE" -gt 0 ]; then
            echo "üìù Recent changes:"
            git log --oneline ${LAST_TAG}..HEAD || git log --oneline -n 3
            
            echo ""
            echo "üìÅ Changed files:"
            git diff --name-only ${LAST_TAG}..HEAD || git diff --name-only HEAD~3..HEAD
            
            echo ""
            echo "ü§ñ Mock AI Decision:"
            echo "- Should Release: true"
            echo "- Version Bump: patch"
            echo "- Reasoning: Changes detected since last tag"
            
            # Create a mock output file for testing
            cat > /tmp/release_analysis.json << EOF
          {
            "should_release": true,
            "version_bump": "patch",
            "reasoning": "Mock analysis - changes detected since last tag"
          }
          EOF
            
            echo "‚úÖ Created mock analysis file"
            cat /tmp/release_analysis.json
          else
            echo "‚ÑπÔ∏è No changes detected since last tag"
          fi

      - name: Test Workflow Conditions
        run: |
          echo "### üß™ Debug Results" >> $GITHUB_STEP_SUMMARY
          echo "" >> $GITHUB_STEP_SUMMARY
          echo "This debug workflow helps identify issues with the release analysis." >> $GITHUB_STEP_SUMMARY
          echo "" >> $GITHUB_STEP_SUMMARY
          echo "**Check the logs above for:**" >> $GITHUB_STEP_SUMMARY
          echo "- AI script import issues" >> $GITHUB_STEP_SUMMARY
          echo "- Missing dependencies" >> $GITHUB_STEP_SUMMARY
          echo "- Git history problems" >> $GITHUB_STEP_SUMMARY
          echo "- Analysis output format issues" >> $GITHUB_STEP_SUMMARY
