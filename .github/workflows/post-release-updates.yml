---
name: Post-Release Updates

on:
  release:
    types: [published]

env:
  OPENAI_API_KEY: ${{ secrets.OPENAI_API_KEY }}
  ANTHROPIC_API_KEY: ${{ secrets.ANTHROPIC_API_KEY }}

jobs:
  update-changelog:
    runs-on: ubuntu-latest
    permissions:
      contents: write
      pull-requests: write
    steps:
      - name: Checkout code
        uses: actions/checkout@v4
        with:
          fetch-depth: 0
          token: ${{ secrets.GITHUB_TOKEN }}

      - name: Set up Python
        uses: actions/setup-python@v5
        with:
          python-version: '3.11'

      - name: Install dependencies
        run: |
          python -m pip install --upgrade pip
          pip install -r .github/scripts/requirements.txt

      - name: Configure Git
        run: |
          git config user.name "github-actions[bot]"
          git config user.email "github-actions[bot]@users.noreply.github.com"

      - name: Extract release info
        id: release
        run: |
          VERSION="${{ github.event.release.tag_name }}"
          VERSION_NUMBER="${VERSION#v}"
          echo "VERSION=$VERSION" >> $GITHUB_OUTPUT
          echo "VERSION_NUMBER=$VERSION_NUMBER" >> $GITHUB_OUTPUT
          
          # Extract changelog entry from release body
          echo "RELEASE_NOTES<<EOF" >> $GITHUB_OUTPUT
          echo "${{ github.event.release.body }}" >> $GITHUB_OUTPUT
          echo "EOF" >> $GITHUB_OUTPUT

      - name: Create update branch
        run: |
          BRANCH="chore/post-release-updates-${{ steps.release.outputs.VERSION }}"
          git checkout -b "$BRANCH"
          echo "BRANCH=$BRANCH" >> $GITHUB_ENV

      - name: Update CHANGELOG.md
        run: |
          # Create a simplified changelog entry from release notes
          cat > changelog_entry.md << 'EOF'
          ## [${{ steps.release.outputs.VERSION }}] - $(date +%Y-%m-%d)
          
          ### Release Highlights
          ${{ github.event.release.body }}
          
          **Full Changelog**: https://github.com/${{ github.repository }}/compare/v$(git describe --tags --abbrev=0 HEAD~1)...${{ steps.release.outputs.VERSION }}
          EOF
          
          # Add to CHANGELOG.md if it exists, or create it
          if [ -f CHANGELOG.md ]; then
            # Insert after the first line (title)
            sed -i '1r changelog_entry.md' CHANGELOG.md
          else
            echo "# Changelog" > CHANGELOG.md
            echo "" >> CHANGELOG.md
            cat changelog_entry.md >> CHANGELOG.md
          fi
          
          rm changelog_entry.md

      - name: Update documentation
        run: |
          # Update version references in documentation
          python .github/scripts/ai_doc_updater.py \
            --version "${{ steps.release.outputs.VERSION_NUMBER }}" || true

      - name: Commit changes
        run: |
          git add -A
          
          if git diff --staged --quiet; then
            echo "No changes to commit"
            echo "CHANGES_MADE=false" >> $GITHUB_ENV
          else
            git commit -m "chore: post-release updates for ${{ steps.release.outputs.VERSION }} [skip release]

            - Updated CHANGELOG.md with release notes
            - Updated documentation version references
            
            This is an automated update following the release of ${{ steps.release.outputs.VERSION }}.
            The [skip release] tag prevents this from triggering another release cycle."
            
            echo "CHANGES_MADE=true" >> $GITHUB_ENV
          fi

      - name: Push changes and create PR
        if: env.CHANGES_MADE == 'true'
        run: |
          git push origin "$BRANCH"
          
          # Create PR using GitHub CLI with auto-merge indicators
          gh pr create \
            --title "📝 Post-release updates for ${{ steps.release.outputs.VERSION }}" \
            --body "## 🤖 Automated Post-Release Updates

          This PR contains automated updates following the release of **${{ steps.release.outputs.VERSION }}**.

          ### Changes Made:
          - ✅ Updated CHANGELOG.md with release notes
          - ✅ Updated documentation version references

          ### Why This PR?
          Our release workflow respects branch protection rules by not pushing directly to master. Instead, it creates this PR to update repository files after the release is published.

          ### Auto-Merge Safety:
          - 🤖 **Generated by**: GitHub Actions bot
          - 📝 **Content**: Documentation only  
          - 🛡️ **Safeguards**: Lightweight docs CI will run
          - 🔄 **Loop prevention**: [skip release] tag prevents infinite cycles
          
          **This PR will auto-merge once docs CI passes (typically within 1-2 minutes).**

          ---
          **Release**: ${{ github.event.release.html_url }}
          **Tag**: ${{ steps.release.outputs.VERSION }}" \
            --head "$BRANCH" \
            --base master \
            --label "documentation" \
            --label "automated" \
            --label "auto-merge"
        env:
          GH_TOKEN: ${{ secrets.GITHUB_TOKEN }}

      - name: Wait for PR and enable auto-merge
        if: env.CHANGES_MADE == 'true'
        run: |
          echo "⏳ Waiting for PR to be created and initial checks to start..."
          sleep 30
          
          # Get PR number
          PR_NUMBER=$(gh pr view "$BRANCH" --json number --jq .number)
          echo "📋 Created PR #$PR_NUMBER"
          
          # Enable auto-merge with squash strategy
          echo "🔄 Enabling auto-merge..."
          gh pr merge "$PR_NUMBER" --auto --squash --delete-branch || {
            echo "⚠️ Could not enable auto-merge. This might require admin permissions."
            echo "The PR will need to be merged manually once docs CI passes."
            echo "PR_AUTO_MERGE=failed" >> $GITHUB_ENV
          }
          
          if [ "$?" -eq 0 ]; then
            echo "✅ Auto-merge enabled! PR will merge automatically once docs CI passes."
            echo "PR_AUTO_MERGE=enabled" >> $GITHUB_ENV
          fi
        env:
          GH_TOKEN: ${{ secrets.GITHUB_TOKEN }}

      - name: Monitor auto-merge status
        if: env.CHANGES_MADE == 'true' && env.PR_AUTO_MERGE == 'enabled'
        run: |
          echo "📊 Monitoring auto-merge status..."
          
          PR_NUMBER=$(gh pr view "$BRANCH" --json number --jq .number 2>/dev/null || echo "")
          
          if [ -n "$PR_NUMBER" ]; then
            # Wait up to 5 minutes for auto-merge to complete
            for i in {1..10}; do
              sleep 30
              
              PR_STATE=$(gh pr view "$PR_NUMBER" --json state --jq .state 2>/dev/null || echo "UNKNOWN")
              
              if [ "$PR_STATE" = "MERGED" ]; then
                echo "✅ PR successfully auto-merged!"
                echo "🎉 Documentation updates are now live on master branch"
                break
              elif [ "$PR_STATE" = "CLOSED" ]; then
                echo "⚠️ PR was closed without merging"
                break
              else
                echo "⏳ PR still open, waiting for checks... (attempt $i/10)"
              fi
            done
          fi
        env:
          GH_TOKEN: ${{ secrets.GITHUB_TOKEN }}

      - name: Summary
        run: |
          if [ "$CHANGES_MADE" = "true" ]; then
            echo "### 📝 Post-Release Documentation Updates" >> $GITHUB_STEP_SUMMARY
            echo "" >> $GITHUB_STEP_SUMMARY
            echo "✅ **Created automated PR for documentation updates**" >> $GITHUB_STEP_SUMMARY
            echo "" >> $GITHUB_STEP_SUMMARY
            
            if [ "$PR_AUTO_MERGE" = "enabled" ]; then
              echo "🔄 **Auto-merge**: Enabled - PR will merge automatically once docs CI passes" >> $GITHUB_STEP_SUMMARY
              echo "⏱️ **Timeline**: Documentation will be updated within 1-2 minutes" >> $GITHUB_STEP_SUMMARY
            elif [ "$PR_AUTO_MERGE" = "failed" ]; then
              echo "⚠️ **Auto-merge**: Could not enable (may require admin permissions)" >> $GITHUB_STEP_SUMMARY
              echo "👥 **Action needed**: Manual merge required once docs CI passes" >> $GITHUB_STEP_SUMMARY
            fi
            
            echo "" >> $GITHUB_STEP_SUMMARY
            echo "### Safety Features:" >> $GITHUB_STEP_SUMMARY
            echo "- 🤖 Generated by trusted automation" >> $GITHUB_STEP_SUMMARY
            echo "- 📝 Documentation-only changes" >> $GITHUB_STEP_SUMMARY
            echo "- 🛡️ Lightweight docs CI validates changes" >> $GITHUB_STEP_SUMMARY
            echo "- 🔄 [skip release] prevents infinite loops" >> $GITHUB_STEP_SUMMARY
            echo "- 🏷️ Clearly labeled as automated update" >> $GITHUB_STEP_SUMMARY
          else
            echo "### ℹ️ No Documentation Updates Needed" >> $GITHUB_STEP_SUMMARY
            echo "" >> $GITHUB_STEP_SUMMARY
            echo "No documentation updates were required for this release." >> $GITHUB_STEP_SUMMARY
          fi