---
- name: Prepare
  hosts: all
  become: true
  gather_facts: false
  vars:
    ansible_python_interpreter: /usr/bin/python3

  pre_tasks:
    # Wait for the container to be ready
    - name: Wait for container to be ready
      ansible.builtin.wait_for_connection:
        timeout: 60
        sleep: 2
      retries: 3
      delay: 5

    - name: Test basic connectivity
      ansible.builtin.ping:
      retries: 3
      delay: 5

    - name: Ensure Python is available
      ansible.builtin.raw: |
        if ! command -v python3 &> /dev/null; then
          echo "Python3 not found, attempting to install..."
          dnf install -y python3 python3-pip
        fi
        python3 --version
      changed_when: false
      register: python_check
      retries: 3
      delay: 5

    - name: Debug Python check
      ansible.builtin.debug:
        var: python_check
      when: python_check is defined

    - name: Ensure Python symlink exists
      ansible.builtin.raw: |
        if [ ! -e /usr/bin/python ]; then
          alternatives --set python /usr/bin/python3 2>/dev/null || \
          ln -sf /usr/bin/python3 /usr/bin/python
        fi
      changed_when: false

    - name: Gather facts after Python is ready
      ansible.builtin.setup:
      retries: 3
      delay: 5

    - name: Debug gathered facts
      ansible.builtin.debug:
        msg: |
          OS Family: {{ ansible_os_family }}
          Distribution: {{ ansible_distribution }}
          Version: {{ ansible_distribution_major_version }}
          Virtualization: {{ ansible_virtualization_type | default('unknown') }}

  tasks:
    - name: Set local account username
      ansible.builtin.set_fact:
        local_account_username: "{{ local_account_username | default('root') }}"

    - name: Ensure critical directories exist with correct permissions
      ansible.builtin.file:
        path: "{{ item.path }}"
        state: directory
        mode: "{{ item.mode }}"
        owner: "{{ item.owner | default('root') }}"
        group: "{{ item.group | default('root') }}"
      loop:
        - { path: /tmp, mode: "1777" }
        - { path: /var/tmp, mode: "1777" }
        - { path: /run, mode: "755" }
        - { path: /run/lock, mode: "1777" }
        - { path: /var/log, mode: "755" }

    - name: Install required Python packages for RHEL 8
      ansible.builtin.package:
        name:
          - platform-python
          - python3-libselinux
        state: present
        update_cache: true
      when: ansible_distribution_major_version | int == 8
      failed_when: false
      retries: 3
      delay: 10

    - name: Install required Python packages for RHEL 9+
      ansible.builtin.package:
        name:
          - python3-libselinux
        state: present
        update_cache: true
      when: ansible_distribution_major_version | int >= 9
      failed_when: false
      retries: 3
      delay: 10

    - name: Create mock files for virtualization detection
      ansible.builtin.file:
        path: "{{ item }}"
        state: touch
        mode: "0644"
      loop:
        - /proc/scsi/scsi
        - /sys/class/dmi/id/product_name
      failed_when: false

    - name: Create mock DMI information for virtualization detection
      ansible.builtin.copy:
        dest: /sys/class/dmi/id/product_name
        content: "Docker Container"
        mode: "0444"
      failed_when: false

    # Ensure systemd is working before proceeding
    - name: Check systemd status
      ansible.builtin.systemd:
        daemon_reload: false
      register: systemd_status
      failed_when: false
      changed_when: false

    - name: Debug systemd status
      ansible.builtin.debug:
        msg: "Systemd status: {{ 'running' if systemd_status.status is defined else 'unknown' }}"

    - name: Install additional packages for role testing
      ansible.builtin.package:
        name:
          - NetworkManager
          - network-scripts
          - cloud-init
          - cloud-utils-growpart
          - wget
          - curl
          - tar
          - gzip
        state: present
        update_cache: true
      failed_when: false
      retries: 3
      delay: 10
      when: ansible_distribution_major_version | int >= 8

    - name: Ensure NetworkManager is configured but not necessarily running
      block:
        - name: Check if NetworkManager service exists
          ansible.builtin.systemd:
            name: NetworkManager
          register: nm_service
          failed_when: false

        - name: Enable NetworkManager if it exists
          ansible.builtin.systemd:
            name: NetworkManager
            enabled: true
            daemon_reload: true
          when: nm_service.status is defined
          failed_when: false

        - name: Start NetworkManager if possible
          ansible.builtin.systemd:
            name: NetworkManager
            state: started
          when: nm_service.status is defined
          failed_when: false
      when: ansible_distribution_major_version | int >= 8

    - name: Create basic network configuration
      ansible.builtin.copy:
        dest: /etc/sysconfig/network
        content: |
          NETWORKING=yes
          HOSTNAME=localhost.localdomain
        mode: "0644"
      failed_when: false

    - name: Create basic hosts file
      ansible.builtin.copy:
        dest: /etc/hosts
        content: |
          127.0.0.1   localhost localhost.localdomain localhost4 localhost4.localdomain4
          ::1         localhost localhost.localdomain localhost6 localhost6.localdomain6
        mode: "0644"
      failed_when: false

    - name: Ensure required user directories exist
      block:
        - name: Check if local user exists
          ansible.builtin.getent:
            database: passwd
            key: "{{ local_account_username }}"
          register: user_check
          failed_when: false

        - name: Create local user if it doesn't exist and it's not root
          ansible.builtin.user:
            name: "{{ local_account_username }}"
            state: present
            shell: /bin/bash
            create_home: true
          when:
            - local_account_username != 'root'
            - user_check.ansible_facts is not defined
          failed_when: false

        - name: Ensure SSH directory exists for local user
          ansible.builtin.file:
            path: /home/{{ local_account_username }}/.ssh
            state: directory
            owner: "{{ local_account_username }}"
            group: "{{ local_account_username }}"
            mode: "0700"
          when:
            - local_account_username != 'root'
            - user_check.ansible_facts is defined or local_account_username != 'root'
          failed_when: false

    - name: Set container-specific facts
      ansible.builtin.set_fact:
        is_container: true
        ansible_virtualization_type: docker
        ansible_virtualization_role: guest

    - name: Final connectivity test
      ansible.builtin.ping:

    - name: Display preparation summary
      ansible.builtin.debug:
        msg: |
          Container preparation completed:
          - OS: {{ ansible_distribution }} {{ ansible_distribution_major_version }}
          - Python: {{ ansible_python_version }}
          - User: {{ local_account_username }}
          - Systemd status: {{ 'running' if systemd_status.status is defined else 'unknown' }}
          - Container ready for role testing
