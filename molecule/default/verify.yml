---
- name: Verify
  hosts: all
  gather_facts: true
  become: true
  vars:
    local_account_username: root

  tasks:
    - name: Set local account username
      ansible.builtin.set_fact:
        local_account_username: "{{ local_account_username | default('root') }}"

    - name: Verify container is responsive
      ansible.builtin.ping:

    - name: Check if required packages are installed
      ansible.builtin.package_facts:
        manager: auto

    - name: Verify essential packages are present
      ansible.builtin.assert:
        that:
          - "item in ansible_facts.packages"
        fail_msg: "Package {{ item }} is not installed"
        success_msg: "Package {{ item }} is correctly installed"
      loop:
        - wget
        - perl
        - cifs-utils
      when: ansible_facts.packages is defined

    - name: Verify SSH configuration
      ansible.builtin.lineinfile:
        path: /etc/ssh/sshd_config
        line: "{{ item }}"
        state: present
      check_mode: true
      register: ssh_check
      failed_when: ssh_check.changed
      loop:
        - "UseDNS no"
        - "GSSAPIAuthentication no"

    - name: SSH configuration verification results
      ansible.builtin.debug:
        msg: "SSH setting '{{ item.item }}' is correctly configured"
      loop: "{{ ssh_check.results }}"
      when: not item.changed

    - name: Check if local user exists (when not root)
      ansible.builtin.getent:
        database: passwd
        key: "{{ local_account_username }}"
      register: user_check
      failed_when: false
      when: local_account_username != 'root'

    - name: Verify user home directory structure
      block:
        - name: Check if .ssh directory exists for local user
          ansible.builtin.stat:
            path: "/home/{{ local_account_username }}/.ssh"
          register: ssh_dir

        - name: Validate SSH directory
          ansible.builtin.assert:
            that:
              - ssh_dir.stat.exists
              - ssh_dir.stat.isdir
              - ssh_dir.stat.mode == '0700'
            fail_msg: "SSH directory for {{ local_account_username }} is not properly configured"
            success_msg: "SSH directory for {{ local_account_username }} is correctly configured"
      when:
        - local_account_username != 'root'
        - user_check.ansible_facts is defined

    - name: Verify hostname was reset
      ansible.builtin.slurp:
        src: /etc/hostname
      register: hostname_content

    - name: Validate hostname content
      ansible.builtin.assert:
        that:
          - "'localhost.localdomain' in (hostname_content.content | b64decode | trim)"
        fail_msg: "Hostname was not properly reset to localhost.localdomain"
        success_msg: "Hostname correctly reset to localhost.localdomain"

    - name: Check network configuration exists
      ansible.builtin.stat:
        path: /etc/sysconfig/network
      register: network_config

    - name: Validate network configuration
      ansible.builtin.assert:
        that:
          - network_config.stat.exists
        fail_msg: "Network configuration file missing"
        success_msg: "Network configuration file exists"

    - name: Verify slow DNS fix
      ansible.builtin.lineinfile:
        path: /etc/sysconfig/network
        line: 'RES_OPTIONS="single-request-reopen"'
        state: present
      check_mode: true
      register: dns_fix
      failed_when: dns_fix.changed

    - name: Validate DNS fix
      ansible.builtin.debug:
        msg: "DNS resolution fix is correctly applied"
      when: not dns_fix.changed

    - name: Check Python environment
      ansible.builtin.command: python3 --version
      register: python_version
      changed_when: false

    - name: Verify Python setup
      ansible.builtin.assert:
        that:
          - python_version.rc == 0
          - "'Python 3' in python_version.stdout"
        fail_msg: "Python 3 is not properly configured"
        success_msg: "Python 3 is correctly configured: {{ python_version.stdout }}"

    - name: Check systemd status (best effort)
      ansible.builtin.systemd:
        daemon_reload: false
      register: systemd_status
      failed_when: false
      changed_when: false

    - name: Display systemd status
      ansible.builtin.debug:
        msg: "Systemd status: {{ 'running' if systemd_status.status is defined else 'unavailable' }}"

    - name: Verify critical system directories
      ansible.builtin.stat:
        path: "{{ item }}"
      register: dir_check
      loop:
        - /tmp
        - /var/tmp
        - /run
        - /var/log

    - name: Validate critical directories
      ansible.builtin.assert:
        that:
          - item.stat.exists
          - item.stat.isdir
        fail_msg: "Critical directory {{ item.item }} is missing or not a directory"
        success_msg: "Critical directory {{ item.item }} exists and is properly configured"
      loop: "{{ dir_check.results }}"

    - name: Check file permissions on /tmp
      ansible.builtin.stat:
        path: /tmp
      register: tmp_perms

    - name: Validate /tmp permissions
      ansible.builtin.assert:
        that:
          - tmp_perms.stat.mode == '1777'
        fail_msg: "/tmp does not have correct permissions (1777)"
        success_msg: "/tmp has correct permissions (1777)"

    - name: Test basic network connectivity (best effort)
      ansible.builtin.uri:
        url: http://www.google.com
        method: GET
        timeout: 10
      register: connectivity_test
      failed_when: false
      when: not (ansible_virtualization_type == 'docker')

    - name: Display connectivity test result
      ansible.builtin.debug:
        msg: |
          Network connectivity test: {{ 'PASSED' if connectivity_test.status == 200 else 'SKIPPED/FAILED' }}
          (This is normal in container environments)
      when: connectivity_test is defined

    - name: Gather verification summary
      ansible.builtin.set_fact:
        verification_results:
          packages_installed: true
          ssh_configured: true
          hostname_reset: true
          network_configured: true
          dns_fix_applied: true
          python_working: true
          directories_present: true
          permissions_correct: true

    - name: Display comprehensive test summary
      ansible.builtin.debug:
        msg: |
          ==========================================
          ROLE VERIFICATION SUMMARY
          ==========================================
          ✓ Essential packages installed
          ✓ SSH daemon properly configured
          ✓ Hostname reset to localhost.localdomain
          ✓ Network configuration created
          ✓ DNS resolution fix applied
          ✓ Python 3 environment working
          ✓ Critical directories present with correct permissions
          ✓ Container environment properly handled

          Role verification PASSED - All tests successful!
          ==========================================

    - name: Final verification checkpoint
      ansible.builtin.debug:
        msg: "All verification tests completed successfully. The role is working correctly in the container environment."
